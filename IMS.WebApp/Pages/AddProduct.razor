@page "/addproduct"
@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>
<br/>
@if (_product != null)
{
    <EditForm Model="_product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" class="form-control" @bind-Value="_product.ProductName"></InputText>
        </div>

        <div class="form-group">
            <label for="qty">Quality</label>
            <InputNumber id="qty" class="form-control" @bind-Value="_product.Quantity"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="_product.Price"></InputNumber>
        </div>

        <ProductInventoriesComponent OnInventorySelected="OnInventorySelected" @ref="_productInventoriesComponent"></ProductInventoriesComponent>
        <br/>
        <button type="submit" class="btn btn-outline-primary">Submit</button>

    </EditForm>
}

@code {
    private Product? _product;

    //用于拿到组件实例
    private ProductInventoriesComponent _productInventoriesComponent = null!;

    /// <summary>
    /// 构造函数实例化要提交的Product
    /// </summary>
    protected override void OnInitialized()
    {
        _product = new Product();
    }

    /// <summary>
    /// 执行完全初始化Product的操作，最终AddProduct
    /// </summary>
    /// <remarks>
    /// 对Product的ProductInventories里的ProductId赋自己的ProductId构成完整的复合主键，
    /// 并且填充Product的ProductInventories
    /// </remarks>
    private async Task OnValidSubmit()
    {
        if (this._product != null)
        {
            _productInventoriesComponent.ProductInventories.ForEach(x => x.ProductId = _product.ProductId);

            _product.ProductInventories = _productInventoriesComponent.ProductInventories;

            await AddProductUseCase.ExecuteAsync(_product);
            NavigationManager.NavigateTo("/products");
        }
    }

    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this._product!.ProductInventories = productInventories; 
    }

}