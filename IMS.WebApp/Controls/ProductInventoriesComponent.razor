<div class="form-group">
    <label>Inventories</label>
    <ViewInventoriesComponent DisplaySearchResult="true" OnSelectInventory="OnSelectInventory"></ViewInventoriesComponent>
</div>

@if (ProductInventories != null && ProductInventories.Count > 0)
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th></th>
        </tr>
        </thead>

        <tbody>
        @foreach (var proInv in ProductInventories)
        {
            <tr>
                <td>
                    @proInv.Inventory?.InventoryName &nbsp;
                </td>

                <td>
                    <input type="number" min="0"
                           @bind-value="@proInv.InventoryQuantity"
                           @bind-value:event="oninput"
                           @onchange="OnInventoryQtyChanged"/>
                </td>

                <td>
                    <button class="btn btn-link" type="button"
                            @onclick="@(() => RemoveInventory(proInv))">
                        Remove
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {

    [Parameter]
    public EventCallback<List<ProductInventory>> OnInventorySelected { get; set; }

    [Parameter]
    public List<ProductInventory> ProductInventories { get; set; } = new List<ProductInventory>();


    private async Task OnInventoryQtyChanged()
    {
        await OnInventorySelected.InvokeAsync(this.ProductInventories);
    }

    private async Task OnSelectInventory(Inventory inventory)
    {
        if (!ProductInventories.Any(x => x.Inventory != null && x.Inventory.InventoryName.Equals(inventory.InventoryName, StringComparison.OrdinalIgnoreCase)))
        {
            ProductInventories.Add(new ProductInventory { InventoryId = inventory.InventoryId, Inventory = inventory });
        }

        await OnInventorySelected.InvokeAsync(this.ProductInventories);
    }

    private void RemoveInventory(ProductInventory productInventory)
    {
        ProductInventories.Remove(productInventory);
    }

}